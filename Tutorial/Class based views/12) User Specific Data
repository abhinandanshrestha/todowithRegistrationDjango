check 11 and modify the views.py as:

from django.shortcuts import render
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy


from django.contrib.auth.views import LoginView

from django.contrib.auth.mixins import LoginRequiredMixin

from .models import Task
# Create your views here.

class CustomLoginView(LoginView):
	template_name = 'base/login.html'
	fields = '__all__'
	redirect_authenticated_user = True

	def get_success_url(self):
		return reverse_lazy('tasks')

class TaskList(LoginRequiredMixin, ListView): #by default looks for templates/base/task_list.html
	model = Task 
	context_object_name = 'tasks'

	def get_context_data(self, **kwargs):
		context = super().get_context_data(**kwargs)
		context['tasks'] = context['tasks'].filter(user=self.request.user)
		context['count'] = context['tasks'].filter(complete=False).count()
		return context

class TaskDetail(LoginRequiredMixin, DetailView): #by default looks for templates/base/task_detail.html
	model = Task
	context_object_name = 'task'
	template_name ='base/task.html'

class TaskCreate(LoginRequiredMixin, CreateView): #by default looks for templates/base/task_form.html
	model = Task
	fields = ['title','description','complete']  #fires all the modelForms
	success_url = reverse_lazy('tasks') #after success re-directs to url 'tasks'

	def form_valid(self, form):
		form.instance.user = self.request.user
		return super(TaskCreate, self).form_valid(form)

class TaskUpdate(LoginRequiredMixin, UpdateView): #by default looks for templates/base/task_form.html
	model = Task
	fields = ['title','description','complete']  #fires all the modelForms
	success_url = reverse_lazy('tasks') #after success re-directs to url 'tasks'

class TaskDelete(LoginRequiredMixin, DeleteView):
	model = Task
	context_object_name = 'task'
	success_url = reverse_lazy('tasks')
